""" John and Mary want to travel between a few towns A, B, C ... Mary has on a sheet of paper a list of distances between these towns. 
ls = [50, 55, 57, 58, 60]. John is tired of driving and he says to Mary that he doesn't want to drive more than t = 174 miles and he will visit 
only 3 towns. Which distances, hence which towns, they will choose so that the sum of the distances is the biggest possible to please Mary and John? 

The function chooseBestSum (or choose_best_sum or ... depending on the language) will take as parameters:
1. t (maximum sum of distances, integer >= 0), 
2. k (number of towns to visit, k >= 1),
3. ls (list of distances, all distances are positive or zero integers and this list has at least one element). 
The function returns the "best" sum ie the biggest possible sum of k distances less than or equal to the given limit t, if that sum exists, or otherwise
None."""

def choose_best_sum(t, k, ls):
    if t < len(ls):
        return None
    else:
        best_distance = list(filter(lambda x: x <= t, [sum(choice) for choice in 
                                                      list(combinations(ls,k))]))
        if best_distance != []:
            closest = best_distance[0]
            print(best_distance)
            for num in best_distance:
                if abs(t - num) < abs(t - closest):
                    closest = num
            return closest
        else:
            return None
