#Decode Morse Code, Advanced.
"""
In this kata you have to write a Morse code decoder for wired electrical telegraph.
Electric telegraph is operated on a 2-wire line with a key that, when pressed, connects the wires together, which 
can be detected on a remote station. The Morse code encodes every character being transmitted as a sequence of "dots" 
(short presses on the key) and "dashes" (long presses on the key).

When transmitting the Morse code, the international standard specifies that:

1. "Dot" – is 1 time unit long.
2. "Dash" – is 3 time units long.
3. Pause between dots and dashes in a character – is 1 time unit long.
4. Pause between characters inside a word – is 3 time units long.
5. Pause between words – is 7 time units long.

However, the standard does not specify how long that "time unit" is. And in fact different operators would transmit
at different speed. An amateur person may need a few seconds to transmit a single character, a skilled professional 
can transmit 60 words per minute, and robotic transmitters may go way faster.

For this kata we assume the message receiving is performed automatically by the hardware that checks the line 
periodically, and if the line is connected (the key at the remote station is down), 1 is recorded, and if the line 
is not connected (remote key is up), 0 is recorded. After the message is fully received, it gets to you for decoding 
as a string containing only symbols 0 and 1.

For example, the message HEY JUDE, that is ···· · −·−−   ·−−− ··− −·· · may be received as follows:

110011001100110000001100000011111100110011111100111111000000000000001100111111001111110011111100000011001100
1111110000001111110011001100000011

As you may see, this transmission is perfectly accurate according to the standard, and the hardware sampled the 
line exactly two times per "dot".

That said, your task is to implement two functions:

1. Function decodeBits(bits), that should find out the transmission rate of the message, correctly decode the message 
to dots ., dashes - and spaces (one between characters, three between words) and return those as a string. Note that 
some extra 0's may naturally occur at the beginning and the end of a message, make sure to ignore them. Also if you 
have trouble discerning if the particular sequence of 1's is a dot or a dash, assume it's a dot.

2. Function decodeMorse(morseCode), that would take the output of the previous function and return a human-readable
string."""

#Part 1: Decoding bits

def decode_bits(bits):
    bits = bits.strip("0")
    unit = min(len(m) for m in re.findall(r'1+|0+',bits))
    bits = bits[::unit]
    groups = []
    uniquekeys = []
    for key, group in groupby(bits):
                groups.append(sum(1 for _ in group))
                uniquekeys.append(key)
    line = list(zip(uniquekeys,groups))
    line.append(("0",7))
    letter = ""
    word = ""
    sentence = ""
    for pair in line:    
        if pair[0] == "1" and pair[1] in range(2):
            letter = "."
            word = word + letter
        elif pair[0] == "1" and pair[1] in range(4):
            letter = "-"
            word = word + letter
        elif pair[0] == "0" and pair[1] in range(2,4):
            sentence += word
            sentence += " "
            word = ""
        elif pair[0] == "0" and pair[1] in range(7,15):
            sentence += word
            word = ""
            sentence += "   "
    return sentence

#Part 2: Translating Morse Code to English.
 MORSE = {'A': '.-',     'B': '-...',   'C': '-.-.', 
        'D': '-..',    'E': '.',      'F': '..-.',
        'G': '--.',    'H': '....',   'I': '..',
        'J': '.---',   'K': '-.-',    'L': '.-..',
        'M': '--',     'N': '-.',     'O': '---',
        'P': '.--.',   'Q': '--.-',   'R': '.-.',
        'S': '...',    'T': '-',      'U': '..-',
        'V': '...-',   'W': '.--',    'X': '-..-',
        'Y': '-.--',   'Z': '--..',

        '0': '-----',  '1': '.----',  '2': '..---',
        '3': '...--',  '4': '....-',  '5': '.....',
        '6': '-....',  '7': '--...',  '8': '---..',
        '9': '----.', " ": "  " 
        }
MORSE_CODE = {value: key for key, value in MORSE.items()}

def decode_morse(morse_code):
    morse_code = morse_code.strip()
    morse_code += " "
    sentence = ""
    cipher_word = ""
    for letter in morse_code:
        if letter != " ":
            i = 0
            cipher_word += letter
        elif letter == " ":
            i+=1
            if i == 1:
                sentence += MORSE_CODE[cipher_word]
                cipher_word = ""
            elif i==2:
                sentence += " "
    return sentence
